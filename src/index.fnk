{getOptions} = import 'loader-utils'

{generate} = import '@fink/loxia'
{parse} = import '@fink/larix'

{with_this} = import '@fink/js-interop/this'
{Error} = import '@fink/js-interop/globals'
{new} = import '@fink/js-interop/reflect'
{null} = import '@fink/js-interop/nullish'



compile = fn filename, source, options:
  loxia_options = dict:
    use_babel_conf: true
    ...options

  ast = parse source, filename
  match ast:
    {errors: [{}]}:
      ast
    else:
      generate ast, filename, source, loxia_options



loader = fn ctx, source, in_source_map, meta:
  options = dict:
    ...getOptions ctx
    inputSourceMap: in_source_map

  filename = ctx.resourcePath
  callback = ctx.async _

  {code, source_map, errors} = await compile filename, source, options

  match errors:
    {length: ? > 0}:
      [{error}] = errors
      callback new Error, error
    else:
      callback null, code, source_map, meta


default = with_this loader
