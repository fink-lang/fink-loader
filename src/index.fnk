{getOptions} = import 'loader-utils'

{generate} = import '@fink/loxia/generate.fnk'
{parse} = import '@fink/larix/parser.fnk'

{with_this} = import '@fink/js-interop/this.fnk'
{error, is_error} = import '@fink/std-lib/error.fnk'
{null} = import '@fink/js-interop/nullish.fnk'



compile = fn filename, source, options:
  loxia_options = dict:
    import: {ext: {abs: '.js', rel: '.fnk'}}
    ...options

  ast = parse source, filename
  match ast:
    {errors: [{}]}:
      ast
    else:
      generate ast, filename, source, loxia_options



loader = fn ctx, source, in_source_map, meta:
  {babel: babel_opts={}, ...loxia_opts} = getOptions ctx

  options = dict:
    ...loxia_opts
    babel: {...babel_opts, inputSourceMap: in_source_map}

  filename = ctx.resourcePath
  callback = ctx.async _

  {code, source_map, errors} = await compile filename, source, options

  match errors:
    --- istanbul ignore else ---
    [{}]:
      [err] = errors
      match err:
        is_error ?:
          callback err
        else:
          callback error err.error, {stack: err.stack}
    else:
      callback null, code, source_map, meta


default = with_this loader
